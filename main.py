import difflib
import logging
import os
from typing import List

from aiogram import executor as ex
from aiogram.dispatcher.filters import Text
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
)

from base import bot, dp
from filters import bind_filters
from helpers import (
    collect_addresses,
    collect_maps,
    collect_maps_codes,
    find_matches_map,
    get_map,
    read_config,
)
from polling import add_new_prom
from states import BotStates
from users import Rights

config = read_config()

logging.basicConfig(level=logging.INFO)

sheet_file = os.path.dirname(__file__) + "/src/regions.json"

map_btn = KeyboardButton(text="üó∫Ô∏è –ö–∞—Ä—Ç–∞")
addr_btn = KeyboardButton(text="üó∫Ô∏è –ê–¥—Ä–µ—Å")

choose_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(map_btn, addr_btn)

bind_filters()


@dp.message_handler(commands=["test"], user_have_rights=Rights.CITY)
async def city_handler(msg: Message):
    await msg.answer("–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ CITY")


@dp.message_handler(commands=["test"], user_have_rights=[Rights.CITIES, Rights.GET_MAP])
async def cities_and_getmap_handler(msg: Message):
    await msg.answer("–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ CITIES GET_MAP")


async def woman(msg: Message):
    await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã")


@dp.message_handler(commands=["firstmap"])
async def firstmap_message_handler_prom(msg: Message):
    """
    –ü–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–¥–∞—Ç—å –Ω–µ –∞–¥–º–∏–Ω
    """
    await woman(msg)


@dp.callback_query_handler(lambda c: c.data == "MAP!")
@dp.message_handler(commands=["map"], is_admin=True)
async def give_map_handler(msg: Message | CallbackQuery):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç—ã –ø–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–µ /map
    """
    if isinstance(msg, CallbackQuery):
        args = msg["message"]["reply_markup"]["inline_keyboard"][0][0]["text"]
        await bot.answer_callback_query(msg.id)
    elif msg.get_args() is not None:
        args = msg.get_args()
    else:
        args = msg["text"]
    for arg in filter(lambda arg: arg in maps_codes, map(str.upper, args.split())):
        map_file, map_addresses = get_map(arg, maps)
        compiled_addresses = "\n".join(
            list(map(lambda address: " ".join(address), map_addresses))
        )
        with open(map_file, "rb") as map_pic:
            if len(compiled_addresses) > 1024:
                await bot.send_photo(msg.from_user.id, map_pic)
                await bot.send_message(msg.from_user.id, compiled_addresses)
            else:
                await bot.send_photo(msg.from_user.id, map_pic, compiled_addresses)


@dp.message_handler(commands=["map"])
async def give_map_handler_prom(msg: Message):
    """
    –ü—Ä–æ–º –ø—ã—Ç–∞–µ—Ç—Å—è —Å–∞–º —Å–µ–±–µ –≤—ã–¥–∞—Ç—å –∫–∞—Ä—Ç—É
    """
    await woman(msg)


@dp.message_handler(state=BotStates.all()[1])
async def give_map_simple(msg: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–∞—Ä—Ç—É
    """
    await dp.current_state(user=msg.from_user.id).reset_state()
    await give_map_handler(msg)


@dp.message_handler(state=BotStates.all()[2])
async def give_map_by_address_simple(msg: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–¥—Ä–µ—Å
    """
    await dp.current_state(user=msg.from_user.id).reset_state()
    await msg.answer(f'–ü—ã—Ç–∞—é—Å—å –Ω–∞–π—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É "{msg["text"]}"')
    closest_addresses: List[str] = difflib.get_close_matches(
        msg["text"], addresses, n=5
    )
    if len(closest_addresses) == 0:
        await msg.answer("–ö–∞–∂–µ—Ç—Å—è —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –∞–¥—Ä–µ—Å–∞")
        return
    for closest_addr in closest_addresses:
        match_map = find_matches_map(closest_addr, maps)
        answer = f"{closest_addr}: {match_map}"
        await msg.answer(
            answer,
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton(match_map, callback_data=f"MAP!")
            ),
        )
        if closest_addr.lower() == msg["text"].lower():
            break


@dp.message_handler(Text(equals="üó∫Ô∏è –ö–∞—Ä—Ç–∞"), is_admin=True)
async def give_map_message_parser(msg: Message):
    """
    –õ–æ–≤—É—à–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ä—Ç–∞–º–∏
    """
    await dp.current_state(user=msg.from_user.id).set_state(BotStates.all()[1])
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É, –∞ —è –ø–æ–ø—ã—Ç–∞—é—Å—å –µ—ë –Ω–∞–π—Ç–∏")


@dp.message_handler(Text(equals="üó∫Ô∏è –ê–¥—Ä–µ—Å"), is_admin=True)
async def handle_address(msg: Message):
    """
    –õ–æ–≤—É—à–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å –∞–¥—Ä–µ—Å–∞–º–∏
    """
    await dp.current_state(user=msg.from_user.id).set_state(BotStates.all()[2])
    await msg.answer("–ö–∞–∫–æ–π –∞–¥—Ä–µ—Å –∏—â–µ–º?")


@dp.message_handler(commands=["start"], is_admin=True)
async def start_handler(msg: Message):
    """
    –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ –∫–Ω–æ–ø–∫–∏
    """
    await msg.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", reply_markup=choose_kb)


@dp.message_handler(commands=["help"], is_admin=True)
async def help_admin(msg: Message):
    """
    –ê–¥–º–∏–Ω –Ω–µ –∑–Ω–∞–µ—Ç –∫–∞–∫ —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
    """
    await msg.answer(
        "/map –¥–ª—è –≤—ã–¥–∞—á–∏ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã\n"
        "/map –ö1-1 –¥–ª—è –≤—ã–¥–∞—á–∏ –∫–∞—Ä—Ç—ã –ö1-1\n"
        "/map –ö1-1 –ö1-2 ... –¥–ª—è –≤—ã–¥–∞—á–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞—Ä—Ç\n"
        "/firstmap –¥–ª—è –≤—ã–¥–∞—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤, "
        "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–æ—É—Ç–µ—Ä–∞, –≤—ã–¥–∞—á–∏ –µ–≥–æ "
        "–ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –µ–≥–æ –∞–¥—Ä–µ—Å–æ–º\n"
        "/end –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–µ\n"
        "/help –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏\n"
    )


@dp.message_handler(commands=["help"])
async def help_prom(msg: Message):
    """
    –ü—Ä–æ–º –Ω–µ –∑–Ω–∞–µ—Ç –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
    """
    await msg.answer(
        "–¥–ª—è –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ –∫–∞–∫–æ–≥–æ-—Ç–æ –æ—Å–æ–±–æ–≥–æ "
        "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, –Ω–æ –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /end"
    )


@dp.message_handler()
async def handle_text(msg: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    await msg.answer("–í–æ–∑–º–æ–∂–Ω–æ –≤—ã —Å–µ–π—á–∞—Å –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫–æ–π-—Ç–æ –∞–¥—Ä–µ—Å –∏–ª–∏ –∫–∞—Ä—Ç—É")
    await msg.answer(
        "–¢–µ–ø–µ—Ä—å —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ", reply_markup=choose_kb
    )


def main() -> None:
    # ex.start_polling(dp, skip_updates=True)
    ex.start_polling(dp)


if __name__ == "__main__":
    maps = collect_maps(sheet_file)
    addresses = collect_addresses(maps)
    maps_codes = collect_maps_codes(maps)
    main()

# TODO: –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø—Ä–æ–º—É
# TODO: —Ñ–∏–∫—Å–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
# TODO: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–¥

# firstmap
# —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è:
#   –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–æ—É—Ç–µ—Ä—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –Ω–∞—à–∏ –ª–∏—Å—Ç–æ–≤–∫—É
#   –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É —Å –µ–≥–æ –¥–æ–º–æ–º –∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫—É—é –∫ –Ω–µ–º—É
#   –¥–æ–±–∞–≤–ª—è–µ—Ç —ç—Ç—É –∫–∞—Ä—Ç—É –≤ –±—É—Ñ–µ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö
#   —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –ø—Ä–æ–º–∞ –µ–≥–æ –∫–∞—Ä—Ç—É –∏ –≤—ã–¥–∞—á—É 300 –ª–∏—Å—Ç–æ–≤–æ–∫ –≤ –±–∞–∑—É
# –ø—Ä–∞–≤–∞:
#   –∞–¥–º–∏–Ω

# end
#   –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ —Ñ–∞–∫—Ç—É
#   —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
#   —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
#   —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–¥–∞—á–∏ –∫–∞—Ä—Ç—ã —Å —Ç–µ–∫—É—â–∏–º –¥–ª—è –±–æ–Ω—É—Å–∞ –∑–∞ –ø—Ä–æ–µ–∑–¥

# givemap
# –≤—ã–¥–∞–µ—Ç —Å–∞–º—É—é –±–ª–∏–∑–∫—É—é –∫ –¥–æ–º—É —Å–≤–æ–±–æ–¥–Ω—É—é –∫–∞—Ä—Ç—É
#
# —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞

# givemap –û1-4
# –≤—ã–¥–∞—Å—Ç –∫–∞—Ä—Ç—É –û1-4
