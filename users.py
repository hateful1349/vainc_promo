import json
import os
from typing import Dict

from tools.database import Database as db
from helpers import read_config
from models.singleton import Singleton


class Rights:
    # CITY = "CITY"
    GET_MAP = "GET_MAP"
    GET_ADDRESS = "GET_ADDRESS"
    CITY_MANAGEMENT = "CITY_MANAGEMENT"
    # CITIES = "CITIES"
    CHANGE_USER_PERMISSIONS = "CHANGE_USER_PERMISSIONS"

    comments = {
        # "CITY": "–ì–æ—Ä–æ–¥",
        "GET_MAP": "üó∫Ô∏è –ö–∞—Ä—Ç–∞",
        "GET_ADDRESS": "üó∫Ô∏è –ê–¥—Ä–µ—Å",
        "CITY_MANAGEMENT": "üè¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤",
        # "CITIES": "–ì–æ—Ä–æ–¥–∞",
        "CHANGE_USER_PERMISSIONS": "üîê –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    }


class Users(metaclass=Singleton):
    @classmethod
    def get_users(cls) -> dict:
        config = dict(read_config())
        with open(
            os.path.dirname(__file__)
            + "/configs"
            + dict(config).get("USERS").get("users_file")
        ) as f:
            users: Dict[str : Dict[str, str | None]] = json.load(f)
        # users[None] = None
        return users

    @classmethod
    def get_main_admins(cls):
        users = cls.get_users()
        return list(
            map(
                lambda user_id: f"@{users.get(user_id).get('username')}"
                if users.get(user_id).get("username") not in [None, ""]
                else f"id{user_id}",
                list(users.keys())[:3],
            )
        )

    @classmethod
    def get_admins(cls) -> set:
        config = dict(read_config())
        admins = config.get("TG").get("admins")
        if admins is None or admins.strip() == "":
            return set()
        return set(admins.split())

    @classmethod
    def get_user(cls, user_id):
        user_id = str(user_id)
        return cls.get_users().get(user_id)

    @classmethod
    def get_user_rights(cls, user_id) -> set:
        user = cls.get_user(user_id)
        if user is None:
            return set()
        if user.get("rights") is None or user.get("rights") == []:
            return set()
        return set(user.get("rights"))

    @classmethod
    def get_user_actions(cls, user_id):
        user_rights = cls.get_user_rights(user_id)
        return list(map(lambda r: Rights.comments.get(r), user_rights))

    @classmethod
    def get_user_cities(cls, user_id):
        user = cls.get_user(user_id)
        if user is None:
            return None
        cities = user.get("city")
        if cities is None or not list(filter(lambda city: city != "", cities)):
            return None
        if cities == "ANY":
            cities = list(map(lambda city: city.name, db.get_cities()))
        return cities

    @classmethod
    def get_management(cls, user_id):
        user = cls.get_user(user_id)
        if user.get("managers") is None:
            return None
        managers = set(user.get("managers"))
        for manager in user.get("managers"):
            managers |= cls.get_management(manager) or set()
        return managers

    @classmethod
    def get_information(cls, user_id):
        res = f"id{user_id}"
        if cls.get_user(user_id).get("username"):
            res += f"\n@{cls.get_user(user_id).get('username')}"
        if cls.get_user(user_id).get("name"):
            res += f"\n–ò–º—è: {cls.get_user(user_id).get('name')}"
        if cls.get_user(user_id).get("post"):
            res += f"\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {cls.get_user(user_id).get('post')}"
        if cls.get_user_cities(user_id):
            if cls.get_user_cities(user_id) == list(map(lambda city: city.name, db.get_cities())):
                res += "\n–ì–æ—Ä–æ–¥: –ª—é–±–æ–π"
            else:
                res += f"\n–ì–æ—Ä–æ–¥–∞: {' '.join(cls.get_user_cities(user_id))}"
        if len(cls.get_user_rights(user_id)) > 0:
            res += "\n–ü—Ä–∞–≤–∞: " + "\n\t".join(cls.get_user_rights(user_id))
        if cls.get_management(user_id):
            managers_ids = list(cls.get_management(user_id))
            managers = list(
                map(
                    lambda user: cls.get_user(user_id).get("username")
                    or cls.get_user(user_id).get("name")
                    or user,
                    managers_ids,
                )
            )
            res += f"\n–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: {' '.join(managers)}"
        return res


# –ª–µ–≥–µ–Ω–¥–∞
# CITY –ø—Ä–∞–≤–æ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —Ç–æ–≥–æ –∏–ª–∏ –∏–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
# GET_MAP –ø—Ä–∞–≤–æ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ –µ—ë –Ω–æ–º–µ—Ä—É
#     —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ CITY
# GET_ADDRESS –ø—Ä–∞–≤–æ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ –∞–¥—Ä–µ—Å—É
#     —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ CITY
#     –µ—Å–ª–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É, —Ç–æ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ —É—Ä–æ–≤–Ω—è GET_MAP
# CITY_MANAGEMENT –ø—Ä–∞–≤–æ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞–º–∏
#     –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª—è—Ç—å, —Å–æ–∑–¥–∞–≤–∞—Ç—å, –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤ –∏ –∏—Ö –ø—Ä–∞–≤–∞ –¥–ª—è —Ç–æ–≥–æ –∏–ª–∏ –∏–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
# CITIES –∫–æ—Å—Ç—ã–ª—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—â–∏—Ö –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
#     —Ç—Ä–µ–±—É–µ—Ç –∫ —Å–µ–±–µ –ø—Ä–∞–≤ GET_MAP –∏–ª–∏ GET_ADDRESS
#     –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∞–µ—Ç –≤—ã–±–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –∏–ª–∏ –∞–¥—Ä–µ—Å–∞ –ø–æ —Ç–æ–º—É –∏–ª–∏ –∏–Ω–æ–º—É –≥–æ—Ä–æ–¥—É
#     –ú–û–ñ–ï–¢ –í–´–ó–í–ê–¢–¨ –û–®–ò–ë–ö–£ –ü–†–ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ò –í–ú–ï–°–¢–ï –° –ü–†–ê–í–ê–ú–ò CITY!!!
# CHANGE_USER_PERMISSIONS –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
